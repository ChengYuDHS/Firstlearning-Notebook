game.h

#define _CRT_SECURE_NO_WARNINGS 1 
#include<stdio.h>
#include<stdlib.h>
#include<time.h>

#define ROW 3
#define COL 3

//声明函数
void IniBoard(char board[ROW][COL], int row, int col);

void DisplayBoard(char board[ROW][COL], int row, int col);

void PlayerMove(char broad[ROW][COL], int row, int col);

void ComputerMove(char broad[ROW][COL], int row, int col);

char IsWin(char board[ROW][COL], int row, int col);//玩家/电脑赢了结束'*'/'#'，游戏继续'g'，平局结束'o'

int IsFull(char board[ROW][COL], int row, int col);//1满了 0没满


game.c

#define _CRT_SECURE_NO_WARNINGS 1 
#include "game.h"

void IniBoard(char board[ROW][COL], int row, int col)
{
	for (int i = 0; i< row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			board[i][j] = ' ';
		}
	}
}

void DisplayBoard(char board[ROW][COL], int row, int col)
{
	for (int i = 0; i < row; i++)
	{
		//打印数据
		for (int j = 0; j < col; j++)
		{
			printf(" %c ", board[i][j]);
			if (j != col - 1)
			{
				printf("|");
			}
		}
		printf("\n");
		if (i != row - 1)
		{
			for (int j = 0; j < col; j++)
			{
				printf("---");
				if (j != col - 1)
				{
					printf("|");
				}

			}
		}
		printf("\n");
	}
}

void PlayerMove(char board[ROW][COL], int row, int col)
{
	int x = 0;
	int y = 0;
	while (1)
	{
		printf("Player move \nInput your location\n");
		scanf("%d%d", &x, &y);
		//判断输入合法性
		if (x >= 1 && x <= row && y >= 1 && y <= col)
		{
			if (board[x - 1][y - 1] == ' ')
			{
				board[x - 1][y - 1] = '*';
				break;
			}
			else
			{
				printf("Location occupied\n");
			}
		}
		else
		{
			printf("Invalid location\n");
		}
	}
}

void ComputerMove(char board[ROW][COL], int row, int col)
{
	int x = 0;
	int y = 0;
	printf("computer move\n");
	while (1)
	{
		x = rand() % row;
		y = rand() % col;
		if (board[x - 1][y - 1] == ' ')
		{
			board[x - 1][y - 1] = '#';
			break;
		}
	}
}

char IsWin(char board[ROW][COL], int row, int col)
{
	//三行三列
	for (int i = 0; i < row; i++)
	{
		if (board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][0] != ' ')
		{
			return board[i][0];
		}
	}

	for (int i = 0; i < row; i++)
	{
		if (board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[0][i] != ' ')
		{
			return board[0][i];
		}
	}
	//对角线
	if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[0][0] != ' ')
	{
		return board[1][1];
	}
	if (board[0][2] == board[1][1] && board[1][1] == board[2][0] && board[1][1] != ' ')
	{
		return board[1][1];
	}
	//是否平局
	if (1 == IsFull(board, ROW, COL))
	{
		return 'o';
	}
	return 'g';
}

int IsFull(char board[ROW][COL], int row, int col)
{
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			if (board[i][j] == ' ')
			{
				return 0;//没满
			}
		}
	}
	return 1;//满了
}
test.c



#include "game.h"

void menu()
{
	printf("***********************************\n");
	printf("*****1. play*********0. exit*******\n");
	printf("***********************************\n");
}

//游戏算法的实现
void game()
{
	char ret;
	char board[ROW][COL] = {'a'};//存放信息

	IniBoard(board, ROW, COL);//初始化棋盘

	DisplayBoard(board, ROW, COL);//打印棋盘

	//开始下棋
	while (1)
	{
		//玩家先走
		PlayerMove(board, ROW, COL);
		//判断是否赢
		ret = IsWin(board, ROW, COL);
		if (ret != 'g')
		{
			break;
		}
		DisplayBoard(board, ROW, COL);

		//电脑下棋
		ComputerMove(board, ROW, COL);
		ret = IsWin(board, ROW, COL);
		if (ret != 'g')
		{
			break;
		}
		DisplayBoard(board, ROW, COL);
	}
	if (ret == '*')
	{
		printf("You win!\n");
	}
	else if (ret == '#')
	{
		printf("You lose\n");
	}
	else if (ret == 'o')
	{
		printf("平局\n");
	}
}


void test()
{
	do
	{
		int input = 0;
		srand((unsigned int)time(NULL));
		menu();
		printf("please choose:>\n");
		scanf("%d", &input);
		switch (input)
		{
		case 1:
			printf("start\n");
			game();
			break;
		case 0:
			printf("close\n");
			break;
		default:
			printf("invalid input\n");
			break;
		}
	} while (1);
}

int main()
{
	test();


	return 0;
}
