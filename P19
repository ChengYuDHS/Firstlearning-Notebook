#define _CRT_SECURE_NO_WARNINGS 1 
#include<stdio.h>


int main ()
{
	//操作符详解

	//算数操作符
	//除法得商，取模得余。%取模操作符的两个数必须是整形
	double A = 5 / 2.0;
	printf("A = %lf\n", A);
	
	//移位操作符——算数右移（右边丢弃，左边取原符号位）， 逻辑右移（右边丢弃，左边补0），只能作用于整数，且移位必须是正整数
	int a = 15;
	a = a >> 2;//>>--右移操作符，这里是算数移位。右移除二，左移乘二。若不能整除，若不能整除，则都往小处取值。
	printf("a = %d\n", a);

	a = -15;
	a = a >> 2;
	printf("a = %d\n", a);

	a = -15;
	a = a << 2;//左移操作符，左边丢弃，右边补零。
	printf("a = %d\n", a);

	//位操作符——按位与，按位或，按位异或。操作数也必须是整数
	a = 3;
	int b = 5;
	int c = a & b;//按位与，同时是1才为1
	printf("c = a & b = %d\n", c);
	printf("c = a | b = %d\n", a | b);//按位或——同时是0才是0
	printf("c = a ^ b = %d\n", a ^ b);//按位异或——相同是0，相异是1；

	//不创建临时变量，交换ab的值
	//加减法——求和环节可能溢出
	a = 3;
	b = 5;
	printf("a = %d, b = %d\n", a, b);
	a = a + b;
	b = a - b;
	a = a - b;
	printf("a = %d, b = %d\n", a, b);
	//异或法——执行性不高，可读性不高
	printf("a = %d, b = %d\n", a, b);
	a = a ^ b;
	b = a ^ b;
	a = a ^ b;
	printf("a = %d, b = %d\n", a, b);

	//统计num的补码中有几个1
	int num = 0;
	int count = 0;
	scanf("%d", &num);
	while (num)
	{
		if (num % 2 == 1)
		{
			count++;
		}
		num = num / 2;
	}
	printf("%d\n", count);//这个办法不能用于负数

	scanf("%d", &num);
	count = 0;
	for (int i = 0; i < 32; i++)
	{
		if (1 == ((num >> i) & 1))
		{
			count++;
		}
	}
	printf("%d\n", count);//这个办法更好

	//赋值操作符
	c = a = b + 1;//连续赋值，可以但不推荐使用，可读性差
	//复合赋值符
	a = a + 2;//算数操作符
	a += 2;

	a = a >> 1;//移位操作符
	a >>= 1;

	a = a & 1;//按位操作符
	a &= 1;//以上三种表达式是等价的，符合操作符也只用于这三种操作符

	//单目操作符——只有一个操作数，!, +, -, &, sizeof
	int* p = &a;//取地址
	*p = 20;//解引用操作符，可用于更改a的值
	//sizeof 算的是变量所占内存空间的大小，单位是字节
	printf("%d\n", sizeof(int[5]));//20

	return 0;
}
