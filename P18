gami.h

#define _CRT_SECURE_NO_WARNINGS 1 
#define ROW 9
#define COL 9
#define ROWS ROW + 2
#define COLS COL + 2
#define EASY_COUNT 79

#include<stdio.h>
#include<stdlib.h>
#include<time.h>

void InitBoard(char mine[ROWS][COLS], int rows, int cols, char set);

void DisplayBoard(char mine[ROWS][COLS], int row, int col);

void SetMine(char mine[ROWS][COLS], int row, int col);

void FindMine(char mine[ROWS][COLS], char show[ROWS][COLS], int row, int col);

int get_mine_count(char mine[ROWS][COLS], int x, int y);

*************************************************************************************

game.c

#define _CRT_SECURE_NO_WARNINGS 1 
#include"game.h"

void InitBoard(char mine[ROWS][COLS], int rows, int cols, char set)
{
	for (int i = 0; i < rows; i++)
	{
		for (int j = 0; j < cols; j++)
		{
			mine[i][j] = set;
		}
	}
}

void DisplayBoard(char mine[ROWS][COLS], int row, int col)
{
	printf("  ");
	for (int i = 1; i <= row; i++)
	{
		printf("%d ", i);
	}
	printf("\n");
	for (int i = 1; i <= row; i++)
	{
		printf("%d ", i);
		for (int j = 1; j <= col; j++)
		{
			printf("%c ", mine[i][j]);
		}
		printf("\n");
	}
}

void SetMine(char mine[ROWS][COLS], int row, int col)
{
	int count = EASY_COUNT;
	while (count)
	{
		int x = rand() % row + 1;//1-9
		int y = rand() % col + 1;
		if (mine[x][y] == '0')
		{
			mine[x][y] = '1';
			count--;
		}
	}
}

int get_mine_count(char mine[ROWS][COLS], int x, int y)
{
	return mine[x - 1][y - 1] + mine[x - 1][y] + mine[x - 1][y + 1] +
		mine[x][y - 1] + mine[x][y + 1] +
		mine[x + 1][y - 1] + mine[x + 1][y] + mine[x + 1][y + 1] - 8 * '0';
}

void FindMine(char mine[ROWS][COLS], char show[ROWS][COLS], int row, int col)
{
	int x = 0;
	int y = 0;
	int win = 0;
	while (win < row*col-EASY_COUNT)
	{
		printf("please input your mine location\n");
		scanf("%d%d", &x, &y);
		if (x >= 1 && x <= row && y <= col && y >= 1)
		{
			if (mine[x][y] == '1')//踩雷
			{
				printf("unfortunatly, you lose\n");
				DisplayBoard(mine, row, col);
				break;
			}
			//若不是累，统计坐标周围几个雷
			else
			{
				int count = get_mine_count(mine, x, y);
				show[x][y] = count + '0';
				DisplayBoard(show, row, col);
				win++;
			}
		}
		else
		{
			printf("invalid location, please input again\n");
		}
	}
	if (win == row * col - EASY_COUNT)
	{
		printf("Congratulations! You Win\n");
		DisplayBoard(mine, row, col);
	}
	
}

*************************************************************************************

test.c

#define _CRT_SECURE_NO_WARNINGS 1 
#include "game.h"

void menu()
{
	printf("\n");
	printf("************************************\n");
	printf("***** 1. play ******* 0. exit ******\n");
	printf("************************************\n");
	printf("\n");
}

void game()
{
	//储存地雷的位置1. 布置好的雷的信息 
	char mine[ROWS][COLS] = { 0 };
	//2. 排查出的信息
	char show[ROWS][COLS] = { 0 };
	//初始化
	InitBoard(mine, ROWS, COLS, '0');
	InitBoard(show, ROWS, COLS, '*');
	//布置雷的信息
	SetMine(mine, ROW, COL);
	DisplayBoard(mine, ROW, COL);
	DisplayBoard(show, ROW, COL);
	//扫雷
	FindMine(mine, show, ROW, COL);
}

void test()
{
	int input = 0;
	do
	{
		menu();
		printf("please choose\n");
		scanf("%d", &input);
		switch (input)
		{
		case 1:
			game();
			break;
		case 0:
			printf("turn off the game\n");
			break;
		default:
			printf("invalid choise, please choose again\n\n");
			break;
		}
	} while (input);
}

int main ()
{
	srand((unsigned int)time(NULL));
	test();

	return 0;

	
}
